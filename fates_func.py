# -*- Python source file -*-
"""
File Name : fates_func.py

Description : Functions working with FATES outputs

Created on : Wed 01 Jan 2025 10:57:31 PM PST

Last Modified : Wed 22 Jan 2025 09:56:05 AM PST

Author : Shijie Shu
"""
import netCDF4 as nc4
import numpy as np
import copy

def moving_average(a, n=10) :
    """
    Quick moving average function
    # a - input array
    # n - the window of moving average
    """
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret[n - 1:] / n

def average_every_n_element(arr, n, axis=0):
    """Calculates the average of every n elements along the specified axis of numpy array, arr."""
    # Generated by Co-pilot

    # Check if the array can be evenly divided into chunks of size n
    if arr.shape[axis] % n != 0:
        raise ValueError("The length of the axis ({arr.shape[axis]}) must be divisible by n ({n}).")

    # Reshape the array to group elements for averaging
    new_shape = list(arr.shape)
    new_shape[axis] = new_shape[axis] // n
    new_shape.insert(axis + 1, n)
    reshaped_arr = arr.reshape(new_shape)

    # Calculate the mean along the new axis
    return np.mean(reshaped_arr, axis=axis + 1)

# Open the file and obtain the time series of wanted variables
def read_fatesmrv_outputs(block_n, block_ens, fyear, block_path, block_prefix, get_annual_mean=False):
    # Get annual mean -  false: monthly mean
    #                    true: annual mean
    # Declare blank var lists
    # CLimate vars
    tbot_collect, pco2_collect, pbot_collect, rain_collect, fsds_collect, flds_collect, snow_collect = ([] for i in range(7))

    # Demographic vars
    num_sz_collect, time_collect, height_ca_collect, height_ba_collect, age_patch_collect, age_collect, can_area_collect, cr_area_pf_collect, ba_collect, num_can_sz_collect,num_ustory_sz_collect = ([] for i in range(11))

    # Physiological vars
    gpp_collect, gpp_bl_collect, gpp_nl_collect, npp_collect, npp_bl_collect, npp_nl_collect, lai_collect, lai_age_collect, lai_can_sz_collect = ([] for i in range(9))
    vegc_collect, vegc_bl_collect, vegc_nl_collect, agb_sz_collect, leafc_collect, leafc_bl_collect, leafc_nl_collect, reprodc_collect, sapwoodc_collect, structc_collect,  storec_collect, frc_collect = ([] for i in range(12))
    rec_collect, mort_pf_collect, mort_collect, mort_ustory_collect, ddbh_can_sz_collect, ddbh_ustory_sz_collect, litter_collect, spread_collect, soilc_collect = ([] for i in range(9))

    # Management vars
    logging_rate_collect, sec_frac_collect, harvested_wood_product_collect, germ_collect = ([] for i in range(4))
    #if(additional_vars):
    #    woodnpp_collect, promote_collect, demote_collect = ([] for i in range(3))

    # Loop through members and collect the time series
    # for i in np.arange(0,len(candidates)):
    for k in np.arange(0,block_n):
        for i in np.arange(0,block_ens[k]):
            for j in np.arange(0, len(fyear)):
                ens_num = str(i+1).zfill(4)
                fpath = block_path[k]+block_prefix[k]+ens_num+'.h0.'+str(fyear[j]).zfill(4)+'-02-01-00000.nc'
                dtc = nc4.Dataset(fpath)
                dtime = dtc['time'][:]
                # Climate
                dtbot = dtc['TBOT'][:]
                dpco2 = dtc['PCO2'][:]
                dpbot = dtc['PBOT'][:]
                drain = dtc['RAIN'][:]
                dsnow = dtc['SNOW'][:]
                dfsds = dtc['FSDS'][:]
                dflds = dtc['FLDS'][:]
                # Main
                dnum_sz = dtc['FATES_NPLANT_SZ'][:]
                dgpp = dtc['FATES_GPP'][:]
                dgpp_pf = dtc['FATES_GPP_PF'][:]
                dnpp = dtc['FATES_NPP'][:]
                dnpp_pf = dtc['FATES_NPP_PF'][:]
                dlai = dtc['FATES_LAI'][:]
                dlai_age = dtc['FATES_LAI_AP'][:]
                dlai_can_sz = dtc['FATES_LAI_CANOPY_SZ'][:]
                dleafc = dtc['FATES_LEAFC'][:]
                dleafc_pf = dtc['FATES_LEAFC_PF'][:]
                dheight_ba = dtc['FATES_BA_WEIGHTED_HEIGHT'][:]
                dheight_ca = dtc['FATES_CA_WEIGHTED_HEIGHT'][:]
                dvegc = dtc['FATES_VEGC'][:]
                dvegc_pf = dtc['FATES_VEGC_PF'][:]
                dagb_sz = dtc['FATES_VEGC_ABOVEGROUND_SZ'][:]
                dreprodc = dtc['FATES_REPROC'][:]
                dsapwoodc = dtc['FATES_SAPWOODC'][:]
                dstructc = dtc['FATES_STRUCTC'][:]
                dstorec = dtc['FATES_STOREC'][:]
                dfrc = dtc['FATES_FROOTC'][:]
                drec = dtc['FATES_RECRUITMENT_PF'][:]
                dmort = dtc['FATES_MORTALITY_CANOPY_SZ'][:]
                dmort_pf = dtc['FATES_MORTALITY_PF'][:]
                dmort_ustory = dtc['FATES_MORTALITY_USTORY_SZ'][:]
                dba = dtc['FATES_BASALAREA_SZ'][:]
                dnum_can_sz = dtc['FATES_NPLANT_CANOPY_SZ'][:]
                dnum_ustory_sz = dtc['FATES_NPLANT_USTORY_SZ'][:]
                ddbh_can_sz = dtc['FATES_DDBH_CANOPY_SZ'][:]
                ddbh_ustory_sz = dtc['FATES_DDBH_USTORY_SZ'][:]
                dlitter = dtc['FATES_LITTER_OUT'][:]
                dsoilc = dtc['TOTSOMC_1m'][:]
                dspread = dtc['FATES_CANOPY_SPREAD'][:]
                dage_patch = dtc['FATES_PATCHAREA_AP'][:]
                dage = dtc['FATES_SECONDAREA_ANTHRODIST_AP'][:]
                dcan_area = dtc['FATES_CANOPYAREA_AP'][:]
                dcr_area_pf = dtc['FATES_CROWNAREA_PF'][:]
                dlogging_rate = dtc['FATES_DISTURBANCE_RATE_LOGGING'][:]
                dsec_frac = dtc['FATES_SECONDARY_FOREST_FRACTION'][:]
                dwood_prod = dtc['FATES_HARVEST_CARBON_FLUX'][:]
                dgerm = dtc['FATES_SEED_GERM_EL'][:]
                ## Non-default outputs
                #if(additional_vars):
                #    dwoodnpp = dtc['FATES_SAPWOOD_ALLOC_CANOPY_SZ'][:]
                #    dpromote = dtc['FATES_PROMOTION_RATE_SZ'][:]
                #    ddemote = dtc['FATES_DEMOTION_RATE_SZ'][:]
                dtc.close()

                # Concatenate into same time series
                if(j == 0):
                    dtime_comb = copy.deepcopy(dtime)
                    dtbot_comb = copy.deepcopy(dtbot)
                    dpco2_comb = copy.deepcopy(dpco2)
                    dpbot_comb = copy.deepcopy(dpbot)
                    dsnow_comb = copy.deepcopy(dsnow)
                    drain_comb = copy.deepcopy(drain)
                    dfsds_comb = copy.deepcopy(dfsds)
                    dflds_comb = copy.deepcopy(dflds)
                    dgpp_comb = copy.deepcopy(dgpp)
                    dgpp_pf_comb = copy.deepcopy(dgpp_pf)
                    dnpp_comb = copy.deepcopy(dnpp)
                    dnpp_pf_comb = copy.deepcopy(dnpp_pf)
                    dlai_comb = copy.deepcopy(dlai)
                    dlai_age_comb = copy.deepcopy(dlai_age)
                    dlai_can_sz_comb = copy.deepcopy(dlai_can_sz)
                    dleafc_comb = copy.deepcopy(dleafc)
                    dleafc_pf_comb = copy.deepcopy(dleafc_pf)
                    dheight_ba_comb = copy.deepcopy(dheight_ba)
                    dheight_ca_comb = copy.deepcopy(dheight_ca)
                    dvegc_comb = copy.deepcopy(dvegc)
                    dvegc_pf_comb = copy.deepcopy(dvegc_pf)
                    dagb_sz_comb = copy.deepcopy(dagb_sz)
                    dreprodc_comb = copy.deepcopy(dreprodc)
                    dsapwoodc_comb = copy.deepcopy(dsapwoodc)
                    dstructc_comb = copy.deepcopy(dstructc)
                    dstorec_comb = copy.deepcopy(dstorec)
                    dfrc_comb = copy.deepcopy(dfrc)
                    drec_comb = copy.deepcopy(drec)
                    dmort_comb = copy.deepcopy(dmort)
                    dmort_pf_comb = copy.deepcopy(dmort_pf)
                    dmort_ustory_comb = copy.deepcopy(dmort_ustory)
                    dba_comb = copy.deepcopy(dba)
                    dnum_can_sz_comb = copy.deepcopy(dnum_can_sz)
                    dnum_sz_comb = copy.deepcopy(dnum_sz)
                    dnum_ustory_sz_comb = copy.deepcopy(dnum_ustory_sz)
                    ddbh_can_sz_comb = copy.deepcopy(ddbh_can_sz)
                    ddbh_ustory_sz_comb = copy.deepcopy(ddbh_ustory_sz)
                    dlitter_comb = copy.deepcopy(dlitter)
                    dspread_comb = copy.deepcopy(dspread)
                    dsoilc_comb = copy.deepcopy(dsoilc)
                    dage_patch_comb = copy.deepcopy(dage_patch)
                    dage_comb = copy.deepcopy(dage)
                    dcan_area_comb = copy.deepcopy(dcan_area)
                    dcr_area_pf_comb = copy.deepcopy(dcr_area_pf)
                    dlogging_rate_comb = copy.deepcopy(dlogging_rate)
                    dsec_frac_comb = copy.deepcopy(dsec_frac)
                    dwood_product_comb = copy.deepcopy(dwood_prod)
                    dgerm_comb = copy.deepcopy(dgerm)
                    # Non-default outputs
                    #if(additional_vars):
                    #    dwoodnpp_comb = copy.deepcopy(dwoodnpp)
                    #    dpromote_comb = copy.deepcopy(dpromote)
                    #    ddemote_comb = copy.deepcopy(ddemote)
                else:
                    dtime_comb = np.append(dtime_comb, dtime, axis = 0)
                    dtbot_comb = np.append(dtbot_comb, dtbot, axis = 0)
                    dpco2_comb = np.append(dpco2_comb, dpco2, axis = 0)
                    dpbot_comb = np.append(dpbot_comb, dpbot, axis = 0)
                    drain_comb = np.append(drain_comb, drain, axis = 0)
                    dsnow_comb = np.append(dsnow_comb, dsnow, axis = 0)
                    dfsds_comb = np.append(dfsds_comb, dfsds, axis = 0)
                    dflds_comb = np.append(dflds_comb, dflds, axis = 0)
                    dgpp_comb = np.append(dgpp_comb, dgpp, axis = 0)
                    dgpp_pf_comb = np.append(dgpp_pf_comb, dgpp_pf, axis = 0)
                    dnpp_comb = np.append(dnpp_comb, dnpp, axis = 0)
                    dnpp_pf_comb = np.append(dnpp_pf_comb, dnpp_pf, axis = 0)
                    dlai_comb = np.append(dlai_comb, dlai, axis = 0)
                    dlai_age_comb = np.append(dlai_age_comb, dlai_age, axis = 0)
                    dlai_can_sz_comb = np.append(dlai_can_sz_comb, dlai_can_sz, axis = 0)
                    dleafc_comb = np.append(dleafc_comb, dleafc, axis = 0)
                    dleafc_pf_comb = np.append(dleafc_pf_comb, dleafc_pf, axis = 0)
                    dheight_ba_comb = np.append(dheight_ba_comb, dheight_ba, axis = 0)
                    dheight_ca_comb = np.append(dheight_ca_comb, dheight_ca, axis = 0)
                    dvegc_comb = np.append(dvegc_comb, dvegc, axis = 0)
                    dvegc_pf_comb = np.append(dvegc_pf_comb, dvegc_pf, axis = 0)
                    dagb_sz_comb = np.append(dagb_sz_comb, dagb_sz, axis = 0)
                    dreprodc_comb = np.append(dreprodc_comb, dreprodc, axis = 0)
                    dsapwoodc_comb = np.append(dsapwoodc_comb, dsapwoodc, axis = 0)
                    dstorec_comb = np.append(dstorec_comb, dstorec, axis = 0)
                    dstructc_comb = np.append(dstructc_comb, dstructc, axis = 0)
                    dfrc_comb = np.append(dfrc_comb, dfrc, axis = 0)
                    drec_comb = np.append(drec_comb, drec, axis = 0)
                    dmort_comb = np.append(dmort_comb, dmort, axis = 0)
                    dmort_pf_comb = np.append(dmort_pf_comb, dmort_pf, axis = 0)
                    dmort_ustory_comb = np.append(dmort_ustory_comb, dmort_ustory, axis = 0)
                    dba_comb = np.append(dba_comb, dba, axis = 0)
                    dnum_can_sz_comb = np.append(dnum_can_sz_comb, dnum_can_sz, axis = 0)
                    dnum_sz_comb = np.append(dnum_sz_comb, dnum_sz, axis = 0)
                    dnum_ustory_sz_comb = np.append(dnum_ustory_sz_comb, dnum_ustory_sz, axis = 0)
                    ddbh_can_sz_comb = np.append(ddbh_can_sz_comb, ddbh_can_sz, axis = 0)
                    ddbh_ustory_sz_comb = np.append(ddbh_ustory_sz_comb, ddbh_ustory_sz, axis = 0)
                    dlitter_comb = np.append(dlitter_comb, dlitter, axis = 0)
                    dspread_comb = np.append(dspread_comb, dspread, axis = 0)
                    dsoilc_comb = np.append(dsoilc_comb, dsoilc, axis = 0)
                    dage_patch_comb = np.append(dage_patch_comb, dage_patch, axis=0)
                    dage_comb = np.append(dage_comb, dage, axis = 0)
                    dcan_area_comb = np.append(dcan_area_comb, dcan_area, axis = 0)
                    dcr_area_pf_comb = np.append(dcr_area_pf_comb, dcr_area_pf, axis = 0)
                    dlogging_rate_comb = np.append(dlogging_rate_comb, dlogging_rate, axis=0)
                    dsec_frac_comb = np.append(dsec_frac_comb, dsec_frac, axis=0)
                    dwood_product_comb = np.append(dwood_product_comb, dwood_prod, axis=0)
                    dgerm_comb = np.append(dgerm_comb, dgerm, axis=0)
                    # Non-default outputs
                    #if(additional_vars):
                    #    dwoodnpp_comb = np.append(dwoodnpp_comb, dwoodnpp, axis=0)
                    #    dpromote_comb = np.append(dpromote_comb, dpromote, axis=0)
                    #    ddemote_comb = np.append(ddemote_comb, ddemote, axis=0)

            # Obtain the time series
            time_collect.append(dtime_comb[:])
            tbot_collect.append(dtbot_comb[:])
            pco2_collect.append(dpco2_comb[:])
            pbot_collect.append(dpbot_comb[:])
            rain_collect.append(drain_comb[:])
            snow_collect.append(dsnow_comb[:])
            fsds_collect.append(dfsds_comb[:])
            flds_collect.append(dflds_comb[:])
            gpp_collect.append(dgpp_comb[:]*3600*24*365)
            gpp_bl_collect.append(dgpp_pf_comb[:,0]*3600*24*365)
            gpp_nl_collect.append(dgpp_pf_comb[:,1]*3600*24*365)
            npp_collect.append(dnpp_comb[:]*3600*24*365)
            npp_bl_collect.append(dnpp_pf_comb[:,0]*3600*24*365)
            npp_nl_collect.append(dnpp_pf_comb[:,1]*3600*24*365)
            lai_collect.append(dlai_comb[:])
            lai_age_collect.append(dlai_age_comb[:,:])
            lai_can_sz_collect.append(dlai_can_sz_comb[:,:])
            leafc_collect.append(dleafc_comb[:])
            leafc_bl_collect.append(dleafc_pf_comb[:,0])
            leafc_nl_collect.append(dleafc_pf_comb[:,1])
            vegc_collect.append(dvegc_comb[:])
            vegc_bl_collect.append(dvegc_pf_comb[:,0])
            vegc_nl_collect.append(dvegc_pf_comb[:,1])
            agb_sz_collect.append(dagb_sz_comb[:,:])
            height_ca_collect.append(dheight_ca_comb[:,0])
            height_ba_collect.append(dheight_ba_comb[:,0])
            reprodc_collect.append(dreprodc_comb[:])
            sapwoodc_collect.append(dsapwoodc_comb[:])
            structc_collect.append(dstructc_comb[:])
            storec_collect.append(dstorec_comb[:])
            frc_collect.append(dfrc_comb[:])
            rec_collect.append(drec_comb[:,:])
            mort_collect.append(dmort_comb[:,:])
            mort_pf_collect.append(dmort_pf_comb[:,:])
            mort_ustory_collect.append(dmort_ustory_comb[:,:])
            ba_collect.append(dba_comb[:,:])
            num_can_sz_collect.append(dnum_can_sz_comb[:,:])
            num_sz_collect.append(dnum_sz_comb[:,:])
            num_ustory_sz_collect.append(dnum_ustory_sz_comb[:,:])
            ddbh_can_sz_collect.append(ddbh_can_sz_comb[:,:])
            ddbh_ustory_sz_collect.append(ddbh_ustory_sz_comb[:,:])
            litter_collect.append(dlitter_comb[:])
            spread_collect.append(dspread_comb[:])
            soilc_collect.append(dsoilc_comb[:]*0.001)
            age_patch_collect.append(dage_patch_comb[:,:])
            age_collect.append(dage_comb[:,:])
            can_area_collect.append(dcan_area_comb[:,:])
            cr_area_pf_collect.append(dcr_area_pf_comb[:,:])
            logging_rate_collect.append(dlogging_rate_comb[:])
            sec_frac_collect.append(dsec_frac_comb[:])
            harvested_wood_product_collect.append(dwood_product_comb[:])
            germ_collect.append(dgerm_comb[:])
            # Non-default outputs
            #if(additional_vars):
            #    woodnpp_collect.append(dwoodnpp_comb[:])
            #    promote_collect.append(dpromote_comb[:,:])
            #    demote_collect.append(ddemote_comb[:,:])

    # transfer into np array
    arr_num_sz = np.array(num_sz_collect)
    arr_time = np.array(time_collect)
    arr_tbot = np.array(tbot_collect)
    arr_pco2 = np.array(pco2_collect)
    arr_pbot = np.array(pbot_collect)
    arr_rain = np.array(rain_collect)
    arr_snow = np.array(snow_collect)
    arr_fsds = np.array(fsds_collect)
    arr_flds = np.array(flds_collect)
    arr_gpp = np.array(gpp_collect)
    arr_gpp_bl = np.array(gpp_bl_collect)
    arr_gpp_nl = np.array(gpp_nl_collect)
    arr_npp = np.array(npp_collect)
    arr_npp_bl = np.array(npp_bl_collect)
    arr_npp_nl = np.array(npp_nl_collect)
    arr_lai = np.array(lai_collect)
    arr_lai_age = np.array(lai_age_collect)
    arr_lai_can_sz = np.array(lai_can_sz_collect)
    arr_leafc = np.array(leafc_collect)
    arr_leafc_bl = np.array(leafc_bl_collect)
    arr_leafc_nl = np.array(leafc_nl_collect)
    arr_height_ca = np.array(height_ca_collect)
    arr_height_ba = np.array(height_ba_collect)
    arr_vegc = np.array(vegc_collect)
    arr_vegc_bl = np.array(vegc_bl_collect)
    arr_vegc_nl = np.array(vegc_nl_collect)
    arr_agb_sz = np.array(agb_sz_collect)
    arr_reprodc = np.array(reprodc_collect)
    arr_sapwoodc = np.array(sapwoodc_collect)
    arr_structc = np.array(structc_collect)
    arr_storec = np.array(storec_collect)
    arr_frc = np.array(frc_collect)
    arr_rec = np.array(rec_collect)
    arr_mort = np.array(mort_collect)
    arr_mort_pf = np.array(mort_pf_collect)
    arr_mort_ustory = np.array(mort_ustory_collect)
    arr_ba = np.array(ba_collect)
    arr_num_can_sz = np.array(num_can_sz_collect)
    arr_num_ustory_sz = np.array(num_ustory_sz_collect)
    arr_ddbh_can_sz = np.array(ddbh_can_sz_collect)
    arr_ddbh_ustory_sz = np.array(ddbh_ustory_sz_collect)
    arr_spread = np.array(spread_collect)
    arr_litter = np.array(litter_collect)
    arr_soilc = np.array(soilc_collect)
    arr_age_patch = np.array(age_patch_collect)
    arr_age = np.array(age_collect)
    arr_can_area = np.array(can_area_collect)
    arr_cr_area_pf = np.array(cr_area_pf_collect)
    arr_logging_rate = np.array(logging_rate_collect)
    arr_sec_frac = np.array(sec_frac_collect)
    arr_wood_product = np.array(harvested_wood_product_collect)
    arr_germ = np.array(germ_collect)
    arr_co2_ppm = arr_pco2[:,:]/arr_pbot[:,:]*1000000
    # Non-default outputs
    #if(additional_vars):
    #    arr_woodnpp = np.array(woodnpp_collect)
    #    arr_promote = np.array(promote_collect)
    #    arr_demote = np.array(demote_collect)


    # Calculate annual average
    if(get_annual_mean):
        arr_age_annual_mean = average_every_n_element(arr_age, 12, axis=1)
        arr_age_patch_mean = average_every_n_element(arr_age_patch, 12, axis=1)
        arr_tbot_mean = average_every_n_element(arr_tbot, 12, axis=1)
        arr_pco2_mean = average_every_n_element(arr_pco2, 12, axis=1)
        arr_pbot_mean = average_every_n_element(arr_pbot, 12, axis=1)
        arr_rain_mean = average_every_n_element(arr_rain, 12, axis=1)
        arr_snow_mean = average_every_n_element(arr_snow, 12, axis=1)
        arr_fsds_mean = average_every_n_element(arr_fsds, 12, axis=1)
        arr_flds_mean = average_every_n_element(arr_flds, 12, axis=1)
        arr_gpp_nl_mean = average_every_n_element(arr_gpp_nl, 12, axis=1)
        arr_gpp_bl_mean = average_every_n_element(arr_gpp_bl, 12, axis=1)
        arr_vegc_mean = average_every_n_element(arr_vegc, 12, axis=1)
        arr_vegc_nl_mean = average_every_n_element(arr_vegc_nl, 12, axis=1)
        arr_vegc_bl_mean = average_every_n_element(arr_vegc_bl, 12, axis=1)
        arr_agb_sz_mean = average_every_n_element(arr_agb_sz, 12, axis=1)
        arr_soilc_mean = average_every_n_element(arr_soilc, 12, axis=1)
        arr_logging_rate_mean = average_every_n_element(arr_logging_rate, 12, axis=1)
        arr_sec_frac_mean = average_every_n_element(arr_sec_frac, 12, axis=1)
        arr_num_sz_mean = average_every_n_element(arr_num_sz, 12, axis=1)
        arr_num_can_sz_mean = average_every_n_element(arr_num_can_sz, 12, axis=1)
        arr_num_ustory_sz_mean = average_every_n_element(arr_num_ustory_sz, 12, axis=1)
        arr_rec_mean = average_every_n_element(arr_rec, 12, axis=1)
        arr_mort_can_mean = average_every_n_element(arr_mort, 12, axis=1)
        arr_mort_ustory_mean = average_every_n_element(arr_mort_ustory, 12, axis=1)
        arr_germ_mean = average_every_n_element(arr_germ, 12, axis=1)
        arr_ddbh_can_mean = average_every_n_element(arr_ddbh_can_sz, 12, axis=1)
        arr_ddbh_ustory_mean = average_every_n_element(arr_ddbh_ustory_sz, 12, axis=1)
        arr_wood_product_mean = average_every_n_element(arr_wood_product, 12, axis=1)
        arr_time_mean = average_every_n_element(arr_time, 12, axis=1)
        arr_gpp_mean = average_every_n_element(arr_gpp, 12, axis=1)
        arr_npp_mean = average_every_n_element(arr_npp, 12, axis=1)
        arr_npp_nl_mean = average_every_n_element(arr_npp_nl, 12, axis=1)
        arr_npp_bl_mean = average_every_n_element(arr_npp_bl, 12, axis=1)
        arr_lai_mean = average_every_n_element(arr_lai, 12, axis=1)
        arr_lai_age_mean = average_every_n_element(arr_lai_age, 12, axis=1)
        arr_lai_can_sz_mean = average_every_n_element(arr_lai_can_sz, 12, axis=1)
        arr_leafc_mean = average_every_n_element(arr_leafc, 12, axis=1)
        arr_leafc_nl_mean = average_every_n_element(arr_leafc_nl, 12, axis=1)
        arr_leafc_bl_mean = average_every_n_element(arr_leafc_bl, 12, axis=1)
        arr_height_ca_mean = average_every_n_element(arr_height_ca, 12, axis=1)
        arr_height_ba_mean = average_every_n_element(arr_height_ba, 12, axis=1)
        arr_reprodc_mean = average_every_n_element(arr_reprodc, 12, axis=1)
        arr_sapwoodc_mean = average_every_n_element(arr_sapwoodc, 12, axis=1)
        arr_structc_mean = average_every_n_element(arr_structc, 12, axis=1)
        arr_storec_mean = average_every_n_element(arr_storec, 12, axis=1)
        arr_frc_mean = average_every_n_element(arr_frc, 12, axis=1)
        arr_mort_pf_mean = average_every_n_element(arr_mort_pf, 12, axis=1)
        arr_ba_mean = average_every_n_element(arr_ba, 12, axis=1)
        arr_spread_mean = average_every_n_element(arr_spread, 12, axis=1)
        arr_litter_mean = average_every_n_element(arr_litter, 12, axis=1)
        arr_can_area_mean = average_every_n_element(arr_can_area, 12, axis=1)
        arr_cr_area_pf_mean = average_every_n_element(arr_cr_area_pf, 12, axis=1)
        # CO2 in ppm, for validation
        arr_co2_ppm_mean = arr_pco2_mean[:,:]/arr_pbot_mean[:,:]*1000000

        # # Age structure
        # age_bin = np.arange(1,52)
        # ax_yr = np.arange(1850,1850+nyr)
        # age_yr = np.zeros((nens,nyr))
        # for iyr in np.arange(0,nyr):
        #     for j in np.arange(0,nens):
        #         for k in np.arange(0,51):
        #             age_yr[j,iyr] = age_yr[j,iyr] + age_bin[k] * age_annual_mean[j,iyr,k]

        return  arr_num_sz_mean.squeeze(), arr_time_mean.squeeze(), arr_tbot_mean.squeeze(), arr_pco2_mean.squeeze(), arr_pbot_mean.squeeze(), \
                arr_rain_mean.squeeze(), arr_snow_mean.squeeze(), arr_fsds_mean.squeeze(), arr_flds_mean.squeeze(), arr_gpp_mean.squeeze(), arr_gpp_bl_mean.squeeze(), \
                arr_gpp_nl_mean.squeeze(), arr_npp_mean.squeeze(), arr_npp_bl_mean.squeeze(), arr_npp_nl_mean.squeeze(), arr_lai_mean.squeeze(), \
                arr_lai_age_mean.squeeze(), arr_lai_can_sz_mean.squeeze(), arr_leafc_mean.squeeze(), arr_leafc_bl_mean.squeeze(), arr_leafc_nl_mean.squeeze(), \
                arr_height_ca_mean.squeeze(), arr_height_ba_mean.squeeze(), arr_vegc_mean.squeeze(), arr_vegc_bl_mean.squeeze(), \
                arr_vegc_nl_mean.squeeze(), arr_agb_sz_mean.squeeze(), arr_reprodc_mean.squeeze(), arr_sapwoodc_mean.squeeze(), \
                arr_structc_mean.squeeze(), arr_storec_mean.squeeze(), arr_frc_mean.squeeze(), \
                arr_rec_mean.squeeze(), arr_mort_can_mean.squeeze(), arr_mort_pf_mean.squeeze(), arr_mort_ustory_mean.squeeze(), arr_ba_mean.squeeze(), \
                arr_num_can_sz_mean.squeeze(), arr_num_ustory_sz_mean.squeeze(), arr_ddbh_can_mean.squeeze(), arr_ddbh_ustory_mean.squeeze(), \
                arr_spread_mean.squeeze(), arr_litter_mean.squeeze(), arr_soilc_mean.squeeze(), arr_age_patch_mean.squeeze(), arr_age_annual_mean.squeeze(), \
                arr_can_area_mean.squeeze(), arr_cr_area_pf_mean.squeeze(), arr_logging_rate_mean.squeeze(), arr_sec_frac_mean.squeeze(), arr_wood_product_mean.squeeze(), \
                arr_germ_mean.squeeze(), arr_co2_ppm_mean.squeeze()
    else:
        return  arr_num_sz.squeeze(), arr_time.squeeze(), arr_tbot.squeeze(), arr_pco2.squeeze(), arr_pbot.squeeze(), arr_rain.squeeze(), arr_snow.squeeze(), \
                arr_fsds.squeeze(), arr_flds.squeeze(), arr_gpp.squeeze(), arr_gpp_bl.squeeze(), arr_gpp_nl.squeeze(), arr_npp.squeeze(), arr_npp_bl.squeeze(), \
                arr_npp_nl.squeeze(), arr_lai.squeeze(), arr_lai_age.squeeze(), arr_lai_can_sz.squeeze(), arr_leafc.squeeze(), arr_leafc_bl.squeeze(), arr_leafc_nl.squeeze(), \
                arr_height_ca.squeeze(), arr_height_ba.squeeze(), arr_vegc.squeeze(), arr_vegc_bl.squeeze(), arr_vegc_nl.squeeze(), arr_agb_sz.squeeze(), \
                arr_reprodc.squeeze(), arr_sapwoodc.squeeze(), arr_structc.squeeze(), arr_storec.squeeze(), arr_frc.squeeze(), arr_rec.squeeze(), \
                arr_mort.squeeze(), arr_mort_pf.squeeze(), arr_mort_ustory.squeeze(), arr_ba.squeeze(), arr_num_can_sz.squeeze(), arr_num_ustory_sz.squeeze(), \
                arr_ddbh_can_sz.squeeze(), arr_ddbh_ustory_sz.squeeze(), arr_spread.squeeze(), arr_litter.squeeze(), arr_soilc.squeeze(), \
                arr_age_patch.squeeze(), arr_age.squeeze(), arr_can_area.squeeze(), arr_cr_area_pf.squeeze(), arr_logging_rate.squeeze(), arr_sec_frac.squeeze(), \
                arr_wood_product.squeeze(), arr_germ.squeeze(), arr_co2_ppm.squeeze()

def read_fatesmrv_restart(block_n, block_ens, fyear, block_path, block_prefix):

    # Open the file and obtain the last value
    # This step will take much longer than expected.

    nyr = len(fyear)
    abg_frac = 0.6

    # Initialize as blank lists
    cnplant_collect, can_collect, cheight_collect, clai_collect, ccarea_collect, cleafc_collect, cfnrtc_collect = ([] for i in range(7))
    csapwc_collect, cstorc_collect, creproc_collect, cstruc_collect, cdbh_collect, cddbh_collect, cgpp_collect, cnpp_collect, cpft_collect = ([] for i in range(9))
    cagcwd_collect, cbgcwd_collect, cleaflit_collect, crootlit_collect = ([] for i in range(4))

    # Loop through members and collect the time series
    # since cohort number is quite different from each time snapshot, we shall use list
    # but to my surprise, all files seem to have a fixed number of cohorts = 6400
    # Think this as the maximum number and unused cohorts exit in each file.
    for k in np.arange(0,block_n):
        for i in np.arange(0,block_ens[k]):
            for j in np.arange(0, len(fyear)):
                ens_num = str(i+1).zfill(4)
                fpath = block_path[k]+block_prefix[k]+ens_num+'.r.'+str(fyear[j]).zfill(4)+'-01-01-00000.nc'
                dtc = nc4.Dataset(fpath)
                dnc_per_patch = dtc['fates_CohortsPerPatch'][:]
                dcan = dtc['fates_canopy_layer'][:]
                dnplant = dtc['fates_nplant'][:]
                dheight = dtc['fates_height'][:]
                # Tree LAI per cohort = leaf area / crown area
                dlai = dtc['fates_cohort_treelai'][:]
                dcarea = dtc['fates_cohort_area'][:]
                dleafc = dtc['leaf_c_val_001'][:]
                dfnrtc = dtc['fnrt_c_val_001'][:]
                dsapwc = dtc['sapw_c_val_001'][:]
                dstorc = dtc['store_c_val_001'][:]
                dreproc = dtc['repro_c_val_001'][:]
                dstruc = dtc['struct_c_val_001'][:]
                ddbh = dtc['fates_dbh'][:]
                dddbh = dtc['fates_ddbhdt'][:]
                dgpp = dtc['fates_gpp_acc'][:]
                dnpp = dtc['fates_npp_acc'][:]
                dpft = dtc['fates_pft'][:]
                dagcwd = dtc['fates_cwdagin_vec_001'][:]
                dbgcwd = dtc['fates_cwdbgin_vec_001'][:]
                dleaflit = dtc['fates_leaflittin_vec_001'][:]
                drootlit = dtc['fates_rootlittin_vec_001'][:]
                dtc.close()

                ncohorts = len(dnc_per_patch)

                # Concatenate into same time series
                if(j == 0):
                    dcan_comb = [copy.deepcopy(dcan)]
                    dnplant_comb = [copy.deepcopy(dnplant)]
                    dheight_comb = [copy.deepcopy(dheight)]
                    dlai_comb = [copy.deepcopy(dlai)]
                    dcarea_comb = [copy.deepcopy(dcarea)]
                    dleafc_comb = [copy.deepcopy(dleafc)]
                    dfnrtc_comb = [copy.deepcopy(dfnrtc)]
                    dsapwc_comb = [copy.deepcopy(dsapwc)]
                    dstorc_comb = [copy.deepcopy(dstorc)]
                    dreproc_comb = [copy.deepcopy(dreproc)]
                    dstruc_comb = [copy.deepcopy(dstruc)]
                    ddbh_comb = [copy.deepcopy(ddbh)]
                    dddbh_comb = [copy.deepcopy(dddbh)]
                    dgpp_comb = [copy.deepcopy(dgpp)]
                    dnpp_comb = [copy.deepcopy(dnpp)]
                    dpft_comb = [copy.deepcopy(dpft)]
                    dagcwd_comb = [copy.deepcopy(dagcwd)]
                    dbgcwd_comb = [copy.deepcopy(dbgcwd)]
                    dleaflit_comb = [copy.deepcopy(dleaflit)]
                    drootlit_comb = [copy.deepcopy(drootlit)]
                else:
                    dcan_comb.append(copy.deepcopy(dcan)[:])
                    dnplant_comb.append(copy.deepcopy(dnplant)[:])
                    dheight_comb.append(copy.deepcopy(dheight)[:])
                    dlai_comb.append(copy.deepcopy(dlai)[:])
                    dcarea_comb.append(copy.deepcopy(dcarea)[:])
                    dleafc_comb.append(copy.deepcopy(dleafc)[:])
                    dfnrtc_comb.append(copy.deepcopy(dfnrtc)[:])
                    dsapwc_comb.append(copy.deepcopy(dsapwc)[:])
                    dstorc_comb.append(copy.deepcopy(dstorc)[:])
                    dreproc_comb.append(copy.deepcopy(dreproc)[:])
                    dstruc_comb.append(copy.deepcopy(dstruc)[:])
                    ddbh_comb.append(copy.deepcopy(ddbh)[:])
                    dddbh_comb.append(copy.deepcopy(dddbh)[:])
                    dgpp_comb.append(copy.deepcopy(dgpp)[:])
                    dnpp_comb.append(copy.deepcopy(dnpp)[:])
                    dpft_comb.append(copy.deepcopy(dpft)[:])
                    dagcwd_comb.append(copy.deepcopy(dagcwd)[:])
                    dbgcwd_comb.append(copy.deepcopy(dbgcwd)[:])
                    dleaflit_comb.append(copy.deepcopy(dleaflit)[:])
                    drootlit_comb.append(copy.deepcopy(drootlit)[:])

            # Obtain the time series
            cnplant_collect.append(dnplant_comb)
            can_collect.append(dcan_comb)
            cheight_collect.append(dheight_comb)
            clai_collect.append(dlai_comb)
            ccarea_collect.append(dcarea_comb)
            cleafc_collect.append(dleafc_comb)
            cfnrtc_collect.append(dfnrtc_comb)
            csapwc_collect.append(dsapwc_comb)
            cstorc_collect.append(dstorc_comb)
            creproc_collect.append(dreproc_comb)
            cstruc_collect.append(dstruc_comb)
            cdbh_collect.append(ddbh_comb)
            cddbh_collect.append(dddbh_comb)
            cgpp_collect.append(dgpp_comb)
            cnpp_collect.append(dnpp_comb)
            cpft_collect.append(dpft_comb)
            cagcwd_collect.append(dagcwd_comb)
            cbgcwd_collect.append(dbgcwd_comb)
            cleaflit_collect.append(dleaflit_comb)
            crootlit_collect.append(drootlit_comb)

    # Transfer all lists to array
    arr_can = np.array(can_collect)
    arr_cnplant = np.array(cnplant_collect)
    arr_cheight = np.array(cheight_collect)
    arr_clai = np.array(clai_collect)
    arr_ccarea = np.array(ccarea_collect)
    arr_cleafc = np.array(cleafc_collect)
    arr_cfnrtc = np.array(cfnrtc_collect)
    arr_csapwc = np.array(csapwc_collect)
    arr_cstorc = np.array(cstorc_collect)
    arr_creproc = np.array(creproc_collect)
    arr_cstruc = np.array(cstruc_collect)
    arr_cdbh = np.array(cdbh_collect)
    arr_cddbh = np.array(cddbh_collect)
    arr_cgpp = np.array(cgpp_collect)
    arr_cnpp = np.array(cnpp_collect)
    arr_cpft = np.array(cpft_collect)
    arr_cagcwd = np.array(cagcwd_collect)
    arr_cbgcwd = np.array(cbgcwd_collect)
    arr_cleaflit = np.array(cleaflit_collect)
    arr_crootlit = np.array(crootlit_collect)

    arr_abg_c = arr_cleafc + abg_frac * (arr_csapwc + arr_cstorc  + arr_cstruc)
    # arr_abg_c = (arr_cleafc + abg_frac * (arr_csapwc + arr_cstorc  + arr_cstruc)) * arr_cnplant
    arr_hrv_c = 0.67 * abg_frac * (arr_csapwc + arr_cstruc) * arr_cnplant

    return arr_can, arr_cnplant, arr_cheight, arr_clai, arr_ccarea, arr_cleafc, arr_cfnrtc, arr_csapwc, arr_cstorc, \
           arr_creproc, arr_cstruc, arr_cdbh, arr_cddbh, arr_cgpp, arr_cnpp, arr_cpft, \
           arr_cagcwd, arr_cbgcwd, arr_cleaflit, arr_crootlit, arr_abg_c, arr_hrv_c

# Open harvest rate from land use time series file
def read_hrvrate(block_n, block_ens, block_path, block_prefix, block_suffix):

    vh1_collect, sh1_collect = ([] for i in range(2))

    # Loop through members and collect the time series
    for k in np.arange(0,block_n):
        for i in np.arange(0,block_ens[k]):
            ens_num = str(i+1).zfill(4)
            fpath = block_path[k]+block_prefix+ens_num+block_suffix
            dtc = nc4.Dataset(fpath)
            dvh1 = dtc['HARVEST_VH1'][:]
            dsh1 = dtc['HARVEST_SH1'][:]
            vh1_collect.append(dvh1[:,0,0])
            sh1_collect.append(dsh1[:,0,0])

    vh1_ts = np.array(vh1_collect)
    sh1_ts = np.array(sh1_collect)

    return vh1_ts.squeeze(), sh1_ts.squeeze()

# Conceptual forest age model of FATES under a pre-defined wood harvest rotation length
# The way of calculation mimics the same logic of FATES' calculation of secondary forest age
def age_model(grow_years, run_years, th_age):
    #th_age = 35.0
    # return: 1. site-level mean age, not weighted by area
    #         2. site-level mean age, weighted by area
    #         3. forest area in each age bin (1 ~ >50)

    class PrimaryForest:
        def __init__(self, new_area):
            self.age = 0
            self.area = new_area

        def grow(self, years):
            for _ in range(years):
                self.age += 1

        def harvest_vh1(self, rate):
            secondary_forest = SecondaryForest(rate)
            self.area = self.area - rate
            return secondary_forest

    class SecondaryForest:
        def __init__(self, new_area):
            self.age = 0
            self.area = new_area

        def grow(self, years):
            for _ in range(years):
                self.age += 1

        # Need to use the total secondary forest area (1 - parea) to scale the harvest rate
        def harvest_sh1(self, sarea_mat, rate):
            secondary_forest = SecondaryForest(rate * self.area / (sarea_mat + 1e-7))
            self.area = self.area - rate * self.area / (sarea_mat + 1e-7)
            return secondary_forest

        def harvest_sh2(self, sarea_yng, rate):
            secondary_forest = SecondaryForest(rate * self.area / (sarea_yng + 1e-7))
            self.area = self.area - rate * self.area / (sarea_yng + 1e-7)
            return secondary_forest

        def merge(self, SecondaryForest):
            if(self.age == SecondaryForest.age):
                self.area = self.area + SecondaryForest.area
                SecondaryForest.age = np.nan

    # Create the first forest patch
    pforest = PrimaryForest(new_area=1.0)

    # forest growth
    pforest.grow(years=grow_years)
    sforest_list = []

    # Nyr and array to record history output
    nyr = run_years
    sforest_age = []
    sforest_area_ap = []
    sforest_area = []
    sforest_mat_area = []
    sforest_yng_area = []
    pforest_area = []
    age_bin = np.arange(0,51)

    # Timeseries of harvest rate:
    # hr_v1 = np.append((1.0/10.0)*np.ones((10)), np.zeros((nyr - 10)))
    hr_v1 = np.append((1.0/th_age)*np.ones((int(th_age))), np.zeros((nyr - int(th_age))))
    hr_s1 = (1.0/th_age) * np.ones((nyr))
    hr_s2 = np.zeros((nyr))

    # Need to force the sume of hr_v1 to 1.0 if exceeds
    if(np.nansum(hr_v1) > 1.0):
        hr_v1 = hr_v1 / (np.nansum(hr_v1) + 1e-7)

    # Do a simulation over run_years
    for iyr in np.arange(0, nyr):
        # Harvest
        new_sforest_from_p = pforest.harvest_vh1(rate=hr_v1[iyr])
        new_sforest_from_s = []
        for sforest in sforest_list:
            if(sforest.age >= th_age):
                new_sforest_from_s.append(sforest.harvest_sh1(sarea_mat=sarea_mat, rate=hr_s1[iyr]))
            else:
                new_sforest_from_s.append(sforest.harvest_sh2(sarea_yng=sarea_yng, rate=hr_s2[iyr]))
        sforest_list.append(new_sforest_from_p)
        if(len(new_sforest_from_s) > 0):
            sforest_list.extend(new_sforest_from_s)
        # Merge all patches with the same age
        listlen = len(sforest_list)
        if (len(sforest_list) >= 2):
            for i in np.arange(0,listlen-1):
                for j in np.arange(i+1,listlen):
                    sforest_list[i].merge(sforest_list[j])
            indices_to_remove = []
            for i in np.arange(0,listlen):
                if (np.isnan(sforest_list[i].age)):
                    indices_to_remove.append(i)
            for i in sorted(indices_to_remove, reverse=True):
                del sforest_list[i]
        # Growth
        pforest.grow(years=1)
        for sforest in sforest_list:
            sforest.grow(years=1)

        # Obtain the total area of secondary mature and secondary young for
        # calculating the harvest for the next year
        sarea_mat = 0
        sarea_yng = 0
        for sforest in sforest_list:
            if(sforest.age >= th_age):
                sarea_mat = sarea_mat + sforest.area
            else:
                sarea_yng = sarea_yng + sforest.area

        # Output history
        agg_sforest_area = 0.0
        agg_sforest_age = 0.0
        for sforest in sforest_list:
            agg_sforest_area = agg_sforest_area + sforest.area
        for sforest in sforest_list:
            agg_sforest_age = agg_sforest_age + sforest.age * sforest.area / (agg_sforest_area + 1e-7)
        pforest_area.append(pforest.area)
        sforest_area.append(agg_sforest_area)
        sforest_mat_area.append(sarea_mat)
        sforest_yng_area.append(sarea_yng)
        sforest_age.append(agg_sforest_age)

        # Use the pre-defined age-bin
        sf_area_ap = np.zeros((len(age_bin)-1))
        for sforest in sforest_list:
            for i in np.arange(0, len(sf_area_ap)):
                if (sforest.age > age_bin[i] and sforest.age <= age_bin[i+1]):
                    sf_area_ap[i] = sf_area_ap[i] + sforest.area
        sforest_area_ap.append(sf_area_ap)

    return np.array(sforest_age), np.array(sforest_age)*np.array(sforest_area), np.array(sforest_area_ap)

def refine_candidates(vegc_nl_mean, vegc_bl_mean, gpp_mean, sc_mean):
    # Get candidates within reasonable range of vegc, soilc and gpp
    # Use the multi-year mean between 2013 and 2022
    vegc_nl_obs = 4.22*(1/0.6)*(11.4/9.2)
    vegc_bl_obs = 4.97*(1/0.6)*(11.4/9.2)
    gpp_obs = 2.0
    sc_obs = 22.4

    #ax_yr = np.arange(2000, 2020)

    candidates_idx_nl = np.where(np.logical_and(vegc_nl_mean>=0.7*vegc_nl_obs, vegc_nl_mean<=1.3*vegc_nl_obs))
    candidates_idx_bl = np.where(np.logical_and(vegc_bl_mean>=0.7*vegc_bl_obs, vegc_bl_mean<=1.3*vegc_bl_obs))
    candidates_idx_gpp = np.where(np.logical_and(gpp_mean>=0.7*gpp_obs, gpp_mean<=1.3*gpp_obs))
    candidates_idx_sc = np.where(np.logical_and(sc_mean>=0.7*sc_obs, sc_mean<=1.3*sc_obs))
    can_idx_both = np.intersect1d(candidates_idx_nl, candidates_idx_bl)
    can_idx_nl = np.intersect1d(np.setxor1d(candidates_idx_nl, candidates_idx_bl), candidates_idx_nl)
    can_idx_bl = np.intersect1d(np.setxor1d(candidates_idx_nl, candidates_idx_bl), candidates_idx_bl)
    can_idx_all = np.intersect1d(np.intersect1d(np.intersect1d(candidates_idx_nl, candidates_idx_bl), candidates_idx_sc), candidates_idx_gpp)

    return can_idx_nl, can_idx_nl, can_idx_both, can_idx_all


